Imker-Webapp – Spezifikation V1-V7 (konsolidiert)
0. Zweck, Zielgruppe, Leitplanken

Zweck. Offline-first Betriebsführung für Hobby- und Berufsimker. QR-first Workflow: Scannen → Stockkarte → Aktion in ≤2 Klicks. Rechtssichere Daten nach DE (insb. BW).
Zielgruppe. Semi-professionelle bis professionelle Imker. Nutzen- und zeitgetrieben. Technologie-kritisch.
Leitplanken.

Keine Cloud-Lock-ins. Self-hosted Referenz-Backend. Optional Supabase-Adapter mit identischer REST-ABI.

Token-Effizienz bei Entwicklung: nur minimale Diffs, inkrementell, kein Full-Rewrite.

Mobile first. Offline zuerst. Transparente Sync-Konfliktlösung.

Compliance vor Komfort. Jede Pflicht hat Export und Sperr/Warn-Logik.

1. Umfang nach Phasen (MVP-first)

Phase 1 – Core MVP. Dashboard, Standorte, Völker/Stockkarten, Durchsichten (Schnellformular + Audio-Memo Leitplanken), TAMG-Bestandsbuch inkl. Wartezeit-Sperre, Kalender/ICS (workspace/standort/volk, public off by default), Sync (LWW + Merge-Dialog für kritische Felder), Auth (E-Mail + TOTP), Dokumente (FileRef).
Phase 2 – Extended MVP. Backup/Restore (verschlüsselt), Bulk-Operationen (Wanderung/Fütterung/Behandlung), Ernte & Lose mit N:M-Allokation, Reporting (Jahresübersicht, Standortvergleich), Proben/Analytik, Lager-Batches.
Phase 3 – Polish. Kommentare, Gast-Links (read-only, ablaufbar), Öffentliche Steckbriefe (opt-in, Koordinaten standard ausgeblendet), Offline-Karten (Tile-Caching), Wetter-Prefetch + Fallback, manueller Trachtkalender (optional), Queen-Historie UI, Sperrbezirk-Layer, Benachrichtigungen (Web Push), i18n (DE/EN), Rollen „Helfer“ und Wiki-Reviewer.

Feature-Flags (ENV).
FEATURE_BACKUP, FEATURE_BULK, FEATURE_REPORTS, FEATURE_COMMENTS, FEATURE_GUEST, FEATURE_OFFLINE_TILES, FEATURE_WEATHER_PREFETCH, FEATURE_NOTIFICATIONS, FEATURE_I18N, FEATURE_MANUAL_TRACHT, FEATURE_WARTEZEIT_CASCADE

2. Informationsarchitektur & Module

Navigation. Dashboard · Standorte · Völker · Durchsichten · Bestandsbuch (TAMG) · Fütterung · Ernte & Lose · Wanderung · Proben/Analytik · Lager/Material · Behörden & TSK · Dokumente · Kalender · Wiki/Hilfe · Berichte · Einstellungen.

Module (Kernausschnitt).

Dashboard. Aufgaben, Fristen, Varroa-Risiko, Futterbedarf, Ernteplanung. Schnellaktionen. Kontext-Hilfe (Wiki).

Standorte. Adresse, GPS, Wasserquelle, Genehmigungen, optional NFC/QR. Sperrbezirk-Check (GeoJSON-Layer).

Völker/Stockkarten. Ampeln (Brut/Futter/Varroa/Platz), große Stock-Nr., QR/NFC, Historie.

Durchsicht. Schnellformular (Checkboxen/Slider/Counter), Sprachmemo (Audio Limits), Folgeaufgaben-Vorschlag, CSV/JSON-Reimport für Transkript.

Bestandsbuch (TAMG). Präparat/Wirkstoff/Charge/Dosis/Wartezeit/etc. DE-Katalog pflegbar. Wartezeit-Sperre. Optionale Wartezeit-Kaskade standortweit (Flag).

Fütterung. Typ/Menge/Methode/Anlass. Saison-Summen. Warnungen.

Ernte & Lose. Ernte (kg, Wassergehalt). Lose (Zeitfenster, Analytik, MHD, Etikettendaten). N:M via HarvestLotAlloc.

Proben/Analytik. Honig (Wasser/HMF/Diastase, Grenzwerte), Bienen (AFB/Nosema). Charts + Vergleich.

Wanderung. Planung, Genehmigungen, Gesundheitszeugnisse. Multi-Scan. Sperrbezirk-Warnung.

Lager/Material. Futterwaben, Einschmelzen, Wachsvorräte, Beutenteile, Honigvorräte, Erntevorbereitung.

Behörden & TSK. Registrierungen, Stichtags-/Änderungsmeldungen, Gesundheitszeugnisse, Seuchenfälle.

Dokumente. Upload, Verknüpfungen, Suche.

Wiki/Hilfe. Markdown, Versionierung, Review, FAQ. Kontextregeln (Formular → Artikel).

Kalender & ICS. In-App-Kalender, getrennte Feeds (Workspace/Standort/Volk), Token widerrufbar, public read-only off.

Berichte. Jahresübersicht, Standortvergleich, PDF-Export.

Gamification. Phase 2+: Punkte, Saison-Checklisten, Badges (derzeit nicht MVP-relevant).

3. Datenmodell (fachlich, selektiv)

Common. Address{straße, plz, ort, land} · Geo{lat,lng,geohash?} · FileRef{id, storageKey, mime, bytes, sha256, createdAt, signedUrl?}
User/Workspace. User{id,email,name,roles[],twofaEnabled} · Workspace{id,name} · Membership{userId,workspaceId,role}
Standort. id, workspaceId, name, address, geo, wasserquelle?, genehmigungen:FileRef[], tags[], qrKey?, nfcUid?
Queen & Historie. Queen{id,workspaceId,year,marking?,origin?,notes?} · QueenEvent{id,volkId,queenId,von,bis?,grund?} · Volk{…, koeniginId?:Queen.id, status{brut,futter,varroa,platz}, tags[], qrKey?, nfcUid?}
Durchsicht. id, volkId, datum, checks{königin,stifte,larven,verdeckelte}, pollen?, futter?, verhalten?, wabenZaehlen{brut,futter,leer}, volksstaerke(0–10), sprachmemoFile?:FileRef.id, transkriptFile?:FileRef.id, followUps[]
TAMG Behandlung. scope{volkId?|standortId?|workspace}, datum, praep, wirkstoff, charge?, dosis, methode?, wartezeitTage, behandler, quelle?, belegRef?:FileRef.id, sperrBis
Fütterung. volkId?|standortId?, datum, futtertyp, menge_kg, methode?, anlass?
Ernte/Lose. Ernte{id, standortId?|volkId?, datum, honigraeume, kg, wassergehalt, notiz?} · Los{id, name, zeitraum{von,bis}, standorte[], analytik{wasser?,HMF?,diastase?}, mhd, etikettenfelder{verkehrsbez:"Honig", sorte?, herkunft, fuellmenge_g, mhd, loscode, inverkehrbringer{name,adresse}, zusatzfelder{[key]:string[]}}, oeffentlich?, publicId?} · HarvestLotAlloc{harvestId, lotId, kg} · GlaeserMapping{lotId, jar_ml, deckel_typ, anzahl, serial_start?, serial_end?}
Probe. typ["honig"|"bienen"], datum, labor?, werte{}, resultat?, grenzwertCheck?
Wanderung. vonStandortId, zuStandortId, zeitraum{von,bis}, tracht?, genehmigungRef?:FileRef, gesundheitszeugnisse:FileRef[], sperrbezirkCheck{status,details?}
Lager. Batch-basiert: FutterwabeBatch, EinschmelzBatch, WachsBatch, BeutenteilBatch, HonigVorrat.
Behörden/TSK. Registrierungen · Stichtagsmeldung · Änderungsmeldung · Seuchenfall.
Dokument/Kalender/Wiki. Dokument{typ,file,bezuege[]} · KalenderEvent{typ,start,ende?,scope,sourceEntity?} · WikiArtikel{title,markdown,tags[],version,reviewedBy?,kontextregeln[]}
Kommentare/Gast/Public. Comment{id, entity, entityId, authorId, text, createdAt} · PublicToken{id, entity, entityId, scope, expiresAt, revokedAt?}

Konsistenzregeln.

Σ HarvestLotAlloc.kg ≤ Ernte.kg

Ernte/Los blockiert bis sperrBis (Sperre aus Behandlung).

Optionale Standort-Kaskade (Flag): ≥1 Volk am Standort in Wartezeit → standortweite Los-Sperre.

4. Workflows & UX-Regeln

Scan & Identifikation.

Screen „Scannen“ mit Tabs: QR (Default, Kamera), NFC (nur wenn navigator.nfc), Manuell (Stock-Nr./QR-Key).

NFC-Fehler → Toast → Auto-Rückfall zu QR. Web Share für Deep-Links.

Durchsicht.

30–60 Sek. Eingabe. Checkboxen/Slider/Counter. Audio-Memo optional. Nach Speichern Aufgaben-Vorschläge.

Kalender & ICS.

Feeds pro Workspace/Standort/Volk. Token widerrufbar. Public read-only standardmäßig AUS; Opt-in je Scope.

Öffentliche Steckbriefe.

Opt-in je Volk/Los: /p/{publicId} read-only, noindex.

Koordinaten: Default hidden. PUBLIC_COORDS_MODE ∈ {hidden,rounded,full}, PUBLIC_COORD_PRECISION konfigurierbar.

Validierungen.

Varroa-Schwellenwerte (Default, editierbar je Saison/Region/Methode).
Alkohol/Puder/CO₂ (300 Bienen): Frühjahr ≥1 %, Sommer ≥2 %, Spätjahr ≥3 %.
Natürlicher Milbenfall/Tag: Frühjahr ≥1, Sommer ≥10, Spätjahr ≥6.
Profil: VarroaThresholdProfile{region,saison,methode,schwellwert,einheit} → WARN/BLOCK.

HonigV-DE Etikettprofil. Pflicht: Verkehrsbezeichnung „Honig“, Füllmenge (g), Loscode, MHD („mindestens haltbar bis …“), Ursprungsland(e), Inverkehrbringer (Name+Anschrift). Regex/Masken. Export verweigert bei Lücke mit Regelhinweis.

5. Offline, Sync, Konflikte

Offline-First. IndexedDB (Dexie) Primärspeicher. PWA mit Service Worker.
Sync. Delta-Sync: /sync/pull?cursor, /sync/push (idempotent). Soft-Deletes. Server-Timestamps. LWW pro Feld.
Kritische Felder (nie auto-überschreiben, Merge-Dialog zwingend).

Behandlung.sperrBis, Behandlung.wartezeitTage

Los.loscode, Los.etikettenfelder.*, Los.publicId, Los.oeffentlich

Ernte.kg (falls Allokationen vorhanden)

HarvestLotAlloc.kg

ICS.token

PublicToken.expiresAt / revokedAt

Rollen/Zugehörigkeiten

6. Audio, Wetter/Tracht, Sperrbezirk

Audio Leitplanken. Formate: m4a/mp3/ogg/wav (bevorzugt m4a/aac). ENV: AUDIO_MAX_MINUTES=10, AUDIO_MAX_SIZE_MB=20, AUDIO_WORKSPACE_QUOTA_GB=2, AUDIO_RETENTION_DAYS=30. Nach erfolgreicher Transkription: optionale Auto-Löschung Rohdatei. Quota-LRU mit Nutzer-Bestätigung.
Wetter/Tracht. WetterProvider: Open-Meteo Default; Fallback „keine Prognose verfügbar“. Manuelle Trachtfenster (optional, Flag): TrachtWindow{standortId,von,bis,intensität 0–3,quelle?}. Planung nutzt Provider oder manuelles Fenster.
Sperrbezirk. GeoJSON-Layer uploadbar (Admin-UI). Check je Standort. Link zur Quelle pro Layer.

7. Exporte, Reporting, ICS

Exporte. CSV/JSON Rohdaten je Modul. PDF: Bestandsbuch (signaturfähig), Stichtags-/Änderungsmeldungen, Etikettendaten, Jahresbericht, Standortvergleich.
Reporting. Jahresübersicht: Völkerzahl, Erträge, Behandlungen, Verluste, Varroa.
Standortvergleich: Ertrag/Volk, Wassergehalt, Behandlungsintensität.
ICS. /ics/{workspace|standort|volk}/{token}. Tokens widerrufbar. Public off by default.

8. Architektur

Frontend. Next.js App Router, TypeScript, Tailwind, shadcn/ui, Zustand, React Hook Form + Zod, Dexie (IndexedDB), PWA.
Backend (self-hosted). Fastify (Node), Postgres, MinIO (S3), Keycloak/Ory.
Alternative. Supabase (DB/Auth/Storage/Edge) mit identischer REST-ABI, via ENV umschaltbar.
REST-ABI (Auszug). /sync/pull, /sync/push, /files/sign (PUT/GET), /files/upload, /export/pdf, /ics/*, /public/*, /backup/export, /backup/import, /push/subscribe|unsubscribe|test.
Dateien. Direct-to-storage via pre-signed PUT. Download nur über signierte GETs (signedUrl TTL Standard 15 min, konfigurierbar). Keine öffentlichen Buckets.

Provider-Interfaces. Wetter (Open-Meteo default, austauschbar) · Transkript (lokales Whisper oder OpenAI Whisper) · Sperrbezirk (GeoJSON-Admin).
i18n. DE primär, EN sekundär. JSON-Bundles je Route (lazy), ICU-Messages, Intl für Datum/Zahlen/Einheiten. Persistente Locale.
Benachrichtigungen. Web Push (VAPID), In-App Toast/Banner, Background-Sync. Quellen: Kalender-Events, TAMG-Sperren, Gesundheitszeugnis-Abläufe, TSK-Stichtage, Folgeaufgaben. Opt-in granular. Inhalte minimal. Deep-Links.

9. Sicherheit, Datenschutz, Rollen

Sicherheit. TLS, 2FA (TOTP), signierte URLs, At-Rest-Verschlüsselung im Storage. EU-Hosting möglich.
Öffentlichkeit. Steckbriefe opt-in, noindex, Koordinaten standard hidden. ICS standard nicht öffentlich.
Rollen.

Admin. Vollzugriff.

Editor. Read/Write alle Module.

Viewer. Read-only.

Helfer. Read-write nur Durchsichten, lesen Völker/Standorte/TAMG, kein Export.

Wiki-Reviewer. Darf Wiki-Artikel freigeben/publizieren.

Gast-Token. Read-only, zeitlich begrenzt, widerrufbar (Phase 3).

10. Backup & Restore, Schlüsselwiederherstellung

Backup. .tgz.age verschlüsselt (symmetrische Passphrase). Inhalte: meta.json, entities/*.jsonl, optional files/. Cron-Jobs optional: wöchentlich Vollbackup (So 02:00), täglich Diff (02:00). Retention default 4 Wochen.
Restore. Dry-Run (Counts, Konflikte), Import (Workspace neu/merge), Medien-Queue mit Retry.
Passphrase-Recovery. Server speichert keine Passphrase. Empfohlen: 3-von-5 Shamir-Shares (clientseitig generiert), Recovery-Kit als Offline-Print. Fingerprint (KDF-Hash) lokal beim Admin, nicht serverseitig. Detailliertes Vorgehen in /docs/backup_recovery.md.

11. Performance, Observability, Ops

Budgets. Core-Route JS ≤ 200 kB gz; /scan ≤ 160 kB gz; TTI ≤ 2 s (Mid-Range Phone); Interaktionen ≤ 100 ms. i18n-Bundles ≤ 20 kB gz/Route. Notif-Code lazy erst nach Opt-in.
Netzwerk. Code-Splitting je Route, Images lazy, Tabellen virtualisiert, SW cache-first für statics.
Health/SLO. /healthz, /readyz, strukturierte Logs. SLO: Sync-Push ≥ 99 %, Pull P95 < 1.5 s, Backups ≥ 99.5 %. RPO ≤ 24 h, RTO ≤ 2 h bei 10k Entities. Notif-KPIs: Opt-in, Deliveries/Clicks, Fehlerquote < 1 %.

12. Entwicklungsleitplanken (Token-Effizienz, Doku, Debug, Tests, CI)

Token-Effizienz.

Nur betroffene Blöcke ändern (max 2 Dateien, ~≤30 Zeilen).

Keine kosmetischen Rewrites/Umbenennungen ohne Grund.

Ausgabe in PRs: nur Diffs mit 3–5 Kontextzeilen.

Projektstruktur.

/src
  /components
  /routes
  /services
  /utils
  /config
/tests
/docs
  aenderungen.md
  roadmap.md
README.md


Änderungsdoku (/docs/aenderungen.md).

### {YYYY-MM-DD HH:MM} – {Kurzbeschreibung}
Datei/Komponente: {pfad}
Änderung: {was}
Grund: {warum}
Umsetzung: {Libs/Patterns}
Debug/Logs: {neu}


Debug. log|warn|error('[Scope]', ...) Utility /src/utils/log.ts. Viele try/catch an IO-Grenzen. Fehler-Typ {code,message,cause?}. Optional debug-Paket (app:{scope}).
Tests. Vitest. Pro Service min. Happy- und Fehlerpfad. Playwright optional für E2E.
CI. GitHub Actions: Node 20, npm ci, build, test, Cache.

13. Akzeptanzkriterien (Stichproben)

Phase 1.

QR-Scan → Stockkarte → Durchsicht offline → Online-Sync → sperrBis blockiert Ernte/Los; ICS-Token erzeugbar, public off; kritisches Feld (loscode) triggert Merge-Dialog.

Audio-Upload > Limit → abgewiesen; Logs/Toast vorhanden.

Varroa-Profil ändert Warnschwellen sofort.

Phase 2.

Vollbackup (ohne/mit Dateien) erzeugt. Dry-Run Restore zeigt Counts/Konflikte, Import konsistent.

Ernte↔Los via Allokation, Summe ≤ Ernte.kg.

Jahresbericht/Standortvergleich als PDFs.

Bulk-Behandlung setzt sperrBis, Ernte/Los gesperrt.

Phase 3.

Kommentar an Durchsicht, Gast-Link read-only mit Ablauf.

Öffentlicher Steckbrief ohne Koordinaten (Default hidden).

Offline-Tiles & Wetter Prefetch verfügbar im Standbesuch.

Push-Reminder 24 h vor Termin; Klick öffnet Deep-Link.

i18n-Switch EN: Texte/Formatierung wechseln, Fallbacks korrekt.

Rolle „Helfer“: RW nur Durchsichten, kein Export/TAMG-Änderung.

14. Offene Entscheidungen

Auth-Provider final (Keycloak vs. Ory vs. Supabase Auth).

PDF-Engine serverseitig (PDFKit vs. Playwright).

Map-Provider/Tile-Server-Lizenz/Quota.

15. Nächste Schritte (operative Reihenfolge, kleinteilig)

Skeleton + Dexie + Auth-UI → Scan-Screen (QR/NFC/Manuell) → Stockkarte → Durchsicht.

TAMG + lokale Wartezeit-Sperre (+ optional Kaskade Flag).

ICS-Tokens (public off) + Sync LWW + Merge-Dialog kritische Felder.

Varroa-Profil + HonigV-Profil.

Ernte/Lose + Allokation + Reporting (Jahr/Standort).

Bulk-Wanderung/Fütterung/Behandlung.

Backup/Restore + Recovery-Doku.

Kommentare/Gast + Offline-Tiles/Wetter/Tracht.

Notifs + i18n + Rollen Helfer/Reviewer.

— Ende der V1 —