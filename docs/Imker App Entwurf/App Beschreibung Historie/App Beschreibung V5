TITLE: Imker-Webapp v5 – MVP-first, QR-first, self-hosted Backend

GOAL
Lieferbar in Phasen. Kernfluss: QR→Stockkarte→Aktion ≤2 Klicks. Rechtssichere Daten. Saubere Exporte. Robuste Sync. Klare Budgets.

AUDIENCE
Semi- bis Profi-Imker. Fokus: Zeitersparnis, Compliance, Transparenz.

SCOPE & PRIORISIERUNG
Core MVP (Phase 1)
- Dashboard, Völker/Stockkarten, Durchsichten, Bestandsbuch (TAMG), Sync, Auth (E-Mail+TOTP), Standorte, Dokumente (nur FileRef), Kalender/ICS.
- Offline: volle Kernvorgänge. Konflikte: LWW; kritische Datensätze zeigen einfachen Merge-Dialog.
Extended MVP (Phase 2)
- Backup & Restore (verschlüsselt), Bulk-Operationen (Wanderung/Fütterung/Behandlung), Reporting (Jahresübersicht, Standortvergleich), Proben/Analytik, Ernte & Lose (inkl. N:M-Allokation), Lager-Batches.
Polish (Phase 3)
- Kommentare, Gastzugang read-only, Offline-Karten (Tile-Caching), Wetter-Prefetch, Sperrbezirk-Layer, Queen-Historie UI, Public Steckbriefe.

FEATURE-FLAGS (ENV)
- FEATURE_BACKUP=true|false
- FEATURE_BULK=true|false
- FEATURE_REPORTS=true|false
- FEATURE_COMMENTS=true|false
- FEATURE_GUEST=true|false
- FEATURE_OFFLINE_TILES=true|false
- FEATURE_WEATHER_PREFETCH=true|false

ARCHITEKTUR
Frontend
- Next.js App Router + TS + Tailwind + shadcn/ui. PWA (SW, Manifest). IndexedDB (Dexie).
- Route-Splitting: / (Dashboard), /scan, /volk/[id], /durchsicht/new, /tamg, /standorte, /ernte, /lose, /wanderung, /lager, /kalender, /berichte, /settings.
- Heavy libs lazy: PDF, charts, map, audio transcription UI.
Backend (self-hosted)
- Fastify + Postgres + MinIO(S3) + Keycloak/Ory. REST-ABI: `/sync/pull?cursor`, `/sync/push`, `/files/sign`, `/files/upload`, `/export/pdf`, `/ics/{workspace}/{token}`, `/public/*`, `/backup/export`, `/backup/import`.
- Supabase-Adapter optional, identische ABI.

SCAN & FALLBACK
- Screen „Scannen“ Tabs: QR (default, Kamera), NFC (nur bei `navigator.nfc`, Fehler→Toast→QR), Manuell (Suche nach Stock-Nr./QR-Key). Web Share aktiv.

DATENMODELL
- Unverändert zu v4 (Queen, QueenEvent, Volk, Durchsicht, Behandlung, Fütterung, Ernte, Los, HarvestLotAlloc, GlaeserMapping, Probe, Wanderung, Lager-Batches, Behörden/TSK, Dokument, KalenderEvent, WikiArtikel, FileRef, Address, Geo).
- Comments, Public/Gast Tokens wie v4.

BACKUP & RESTORE (Phase 2)
- Export: `.tgz.age` (symmetrisch, Passphrase), Inhalt: `meta.json`, `entities/*.jsonl`, optional `files/`.
- Restore: Dry-Run, dann Import; Workspace neu/merge; Medien-Queue.
- Standard-Cron: wöchentlich So 02:00 Vollbackup; optional täglich 02:00 Diff (Entities ohne Files). Retention default 4 Wochen. ENV: `BACKUP_CRON_FULL`, `BACKUP_CRON_DIFF`, `BACKUP_RETENTION_WEEKS=4`.

REPORTING (Phase 2)
- Jahresübersicht, Standortvergleich. Serverseitiges PDF. Client-Fallback optional.

BULK-OPS (Phase 2)
- Wanderung Multi-Select; Fütterung nach Filter/Standort; Behandlung Sammelbuchung. Vorschau+Zusammenfassung vor Commit.

VALIDIERUNG
- Plausibilitätsgrenzen: Honig/Volk Warnung >45 kg; Wassergehalt 14–23 % Info; Varroa-Dosis je Präparat. Konsistenz: Summe HarvestLotAlloc ≤ Ernte; Ernte/Los blockiert bis `sperrBis`. Modus: WARN|BLOCK je Regel (ENV).

ÖFFENTLICH/GAST (Phase 3)
- Steckbrief `/p/{publicId}` (noindex, Koordinaten gerundet/aus). Gast-Token mit Ablauf.

OFFLINE-ERWEITERUNGEN (Phase 3)
- Tile-Caching (konfigurierbarer Provider). „Standbesuch vorbereiten“ cached Tiles+Wetter 3–7 Tage.

PERFORMANCE-BUDGETS
- Core Route JS ≤ 200 kB gz (P95), TTI ≤ 2 s Mid-Phone, Interaktionen ≤ 100 ms.
- Route-Level Budgets: 
  - /scan ≤ 160 kB gz, Kamera start ≤ 600 ms.
  - /volk/[id] ≤ 180 kB gz initial.
  - /berichte lazy-load PDFs & Charts.
- Netzwerk: Images lazy, tables virtualisiert, SW cache-first statics, network-first sync/API.

OBSERVABILITY & OPS
- UI-Banner: Offline/Sync-Status. Toaster bei Konflikten/Retry.
- Health: `/healthz`, `/readyz`. Logs strukturiert. Optional Telemetrie Interface.
- SLOs: Sync-Push Erfolgsrate ≥ 99%, Pull-Latenz P95 < 1.5 s, Backup-Jobs Erfolgsrate ≥ 99.5%.
- RPO: ≤ 24 h (mit täglichem Diff). RTO Restore: ≤ 2 h auf 10k Entities.

SECURITY & PRIVACY
- TLS, 2FA, signierte URLs TTL 15 min (ENV), keine öffentlichen Buckets. EU-Hosting möglich. Rollen workspace-weit. Objekt-ACL Phase 2+.

UX RULES
- Mobile first. Ampeln. Segment-Buttons. Fehlermeldungen kurz, handlungsleitend.
- Scan→Stockkarte→Aktion ≤ 2 Klicks. Bulk-Flows mit Vorschau.

AKZEPTANZKRITERIEN
Phase 1 (Core MVP)
- QR-Scan → Stockkarte → Durchsicht offline erfassen → Online sync → TAMG-Sperre wirkt auf Ernte/Los.
- ICS-Feed abonnierbar; LWW-Konflikt an Behandlung per Dialog lösbar.
Phase 2 (Extended)
- Vollbackup erzeugen, herunterladen, neue Instanz Dry-Run → Import; Daten konsistent.
- Bulk-Fütterung für gesamten Standort; Summen korrekt; Validierungswarnungen sichtbar.
- Jahresbericht PDF mit Kennzahlen; Standortvergleich PDF mit Ertrag/Volk.
Phase 3 (Polish)
- Kommentar an Durchsicht, Gastlink read-only; Offline Tiles+Wetter verfügbar im Standbesuch.

DELIVERY PLAN
- M0 Architektur-Skeleton + /scan + Stockkarte + Dexie + Sync (2 Wochen).
- M1 Durchsicht + TAMG + ICS + Validierungen Basis (2–3 Wochen).
- M2 Ernte & Lose + Reporting + Bulk-Ops + Backup (3–4 Wochen).
- M3 Kommentare/Gast + Offline-Tiles/Wetter + Sperrbezirk-Layer (3 Wochen).

ENTWICKLUNGSUMGEBUNG
- Zustand, RHF+Zod, Dexie. Tests: Vitest, Playwright. ESLint/Prettier. PDF serverseitig. ENV: `BACKEND_PROVIDER`, `SIGNED_URL_TTL_MIN`, `PUBLIC_COORD_PRECISION`, `FEATURE_*`, `BACKUP_*`.
